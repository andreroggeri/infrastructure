volumes:
  healthchecks_config:
  restic_cache:

networks:
  applications:
    external: true

services:
  healthchecks:
    image: linuxserver/healthchecks:2.7.20230331
    container_name: healthchecks
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=America/Sao_Paulo
      - REGENERATE_SETTINGS=true
      - SITE_ROOT=$HEALTHCHECKS_HOST
      - SITE_NAME=Healthchecks
      - SUPERUSER_EMAIL=$HEALTHCHECKS_SUPERUSER_EMAIL
      - SUPERUSER_PASSWORD=$HEALTHCHECKS_SUPERUSER_PASSWORD
    volumes:
      - healthchecks_config:/config
    networks:
      - applications
    restart: unless-stopped

  runitor-ynab:
    image: runitor-ynab
    pull_policy: build
    build:
      context: ./cron
      dockerfile: runitor-ynab.Dockerfile
    container_name: runitor
    command: -api-url ${HEALTHCHECKS_HOST}/ping --uuid ${SYNC_PING_UUID} -- ./sync-transactions.sh
    depends_on:
      - healthchecks
    environment:
      - SYNC_CONFIG=$SYNC_CONFIG
      - SYNC_TOPIC=$SYNC_TOPIC

  runitor-restic-backup:
    image: runitor-restic
    pull_policy: build
    build:
      context: ./cron
      dockerfile: runitor-restic.Dockerfile
    container_name: runitor-restic-backup
    command: -api-url ${HEALTHCHECKS_HOST}/ping --uuid ${BACKUP_PING_UUID} -- ./backup-volumes.sh
    depends_on:
      - healthchecks
    environment:
      - RESTIC_REPOSITORY=$RESTIC_REPOSITORY
      - RESTIC_PASSWORD=$RESTIC_PASSWORD
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    volumes:
      - restic_cache:/cache
      - /var/lib/docker/volumes:/mnt/docker-volumes:ro

  runitor-restic-prune:
    image: runitor-restic
    pull_policy: build
    build:
      context: ./cron
      dockerfile: runitor-restic.Dockerfile
    container_name: runitor-restic-prune
    command: -api-url ${HEALTHCHECKS_HOST}/ping --uuid ${PRUNE_PING_UUID} -- ./backup-prune.sh
    depends_on:
      - healthchecks
    environment:
      - RESTIC_REPOSITORY=$RESTIC_REPOSITORY
      - RESTIC_PASSWORD=$RESTIC_PASSWORD
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    volumes:
      - restic_cache:/cache

  ofelia:
    image: mcuadros/ofelia:v0.3.7
    restart: unless-stopped
    container_name: ofelia
    depends_on:
      - runitor-ynab
      - runitor-restic-backup
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - ofelia.enabled=true
      # Restic backup
      - ofelia.job-run.restic-backup.schedule=0 0 1 * * *
      - ofelia.job-run.restic-backup.image=runitor-restic:latest
      - ofelia.job-run.restic-backup.environment=["RESTIC_REPOSITORY=${RESTIC_REPOSITORY}", "RESTIC_PASSWORD=${RESTIC_PASSWORD}", "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"]
      - ofelia.job-run.restic-backup.command=-api-url ${HEALTHCHECKS_HOST}/ping --uuid ${BACKUP_PING_UUID} -- ./backup-volumes.sh
      - ofelia.job-run.restic-backup.volume=["/var/lib/docker/volumes:/mnt/docker-volumes:ro", "restic_cache:/cache"]
      # Restic prune
      - ofelia.job-run.restic-prune.schedule=0 0 8 * * *
      - ofelia.job-run.restic-prune.image=runitor-restic:latest
      - ofelia.job-run.restic-prune.environment=["RESTIC_REPOSITORY=${RESTIC_REPOSITORY}", "RESTIC_PASSWORD=${RESTIC_PASSWORD}", "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"]
      - ofelia.job-run.restic-prune.command=-api-url ${HEALTHCHECKS_HOST}/ping --uuid ${PRUNE_PING_UUID} -- ./backup-prune.sh
      - ofelia.job-run.restic-prune.volume=["restic_cache:/cache"]
      # YNAB sync
      - ofelia.job-run.ynab-sync.schedule=@every 4h
      - ofelia.job-run.ynab-sync.image=runitor-ynab:latest
      - ofelia.job-run.ynab-sync.environment=["SYNC_CONFIG=${SYNC_CONFIG}", "SYNC_TOPIC=${SYNC_TOPIC}"]
      - ofelia.job-run.ynab-sync.command=-api-url ${HEALTHCHECKS_HOST}/ping --uuid ${SYNC_PING_UUID} -- ./sync-transactions.sh
